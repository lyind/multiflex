/*
 * Copyright (C) 2017  Jonas Zeiger <jonas.zeiger@talpidae.net>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

plugins {
    id 'idea'
    id 'java'
    id 'maven'
}

group 'net.talpidae'
version '1'

sourceCompatibility = JavaVersion.VERSION_1_10
targetCompatibility = JavaVersion.VERSION_1_10
[javadoc, compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
}

configurations {
    natives
}

dependencies {
    compile "com.almworks.sqlite4java:sqlite4java:1.0.392"
    natives ("com.almworks.sqlite4java:sqlite4java-win32-x64:1.0.392")
    natives ("com.almworks.sqlite4java:libsqlite4java-linux-amd64:1.0.392")

    compile 'me.lemire.integercompression:JavaFastPFOR:0.+'

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

sourceSets.main.resources.srcDirs += [ "$buildDir/natives/" ]
task copyNatives(type: Copy) {
    from configurations.natives
    into "$buildDir/natives"
    include "*.dll"
    include "*.so"
    include "*.jnilib"
}

// store list of natives in /natives.index
task indexNatives {
    def index = new File("$buildDir/natives/natives.index")
    index.parentFile.mkdirs()
    def indexWriter = index.newWriter()
    configurations.natives.each { file ->
        if (file.getName().matches(/.+?(\.dll|\.so|\.jnilib)/))
        {
            println "native found: " + file.getName()
            indexWriter.write(file.getName() + '\n')
        }
    }
    indexWriter.close()
}
copyNatives.dependsOn(indexNatives)
jar.dependsOn(copyNatives)
test.dependsOn(copyNatives)

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
